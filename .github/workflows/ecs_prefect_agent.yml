name: 1 Initial - ECS Prefect agent

on:
  workflow_dispatch:
    inputs:
      cpu:
        description: CPU for the agent
        required: true
        default: '512'
        type: choice
        options: ['256', '512', '1024', '2048', '4096']
      memory:
        description: Memory for the agent
        required: true
        default: '1024'
        type: choice
        options: ['512', '1024', '2048', '4096', '5120', '6144', '7168', '8192']
      s3_path:
        description: S3 path in the format bucket/path
        required: true
        default: 'prefect-test/prod'
      block_name:
        description: Name of the S3 and ECS blocks
        required: true
        default: 'prod'
      prefect-version:
        description: Prefect version for flows
        required: true
        default: '2.*'
        type: string
<<<<<<< HEAD
      prefect-worker:
=======
      prfect-worker:
>>>>>>> d813bdb (ECR Running)
        description: Prefect worker
        required: true
        default: 'my-ecs-pool'
      aws-region:
        description: AWS Region
        required: true
        default: 'us-east-1'
        type: string

env:
  PROJECT: dataflowops
  ECS_CLUSTER: dataflowops
  BLOCK: ${{ github.event.inputs.block_name }}
  AWS_REGION: ${{ github.event.inputs.aws-region }}
  PREFECT_VERSION: ${{ github.event.inputs.prefect-version }}
  PREFECT_WORKER: ${{ github.event.inputs.prefect-worker }}
  BUCKET: ${{ github.event.inputs.s3_path }}


jobs:
  worker-prefect:
    name: Prefect Worker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Python dependencies
        run: |
          pip install prefect==$PREFECT_VERSION
          pip install .

      - name: Prefect Cloud login
        run: |
          prefect config set PREFECT_API_KEY=${{ secrets.PREFECT_API_KEY }}
          prefect config set PREFECT_API_URL=${{ secrets.PREFECT_API_URL }}

      - name: Print Inputs
        run: |
          echo "Block Name: ${{ github.event.inputs.block_name }}"
          echo "AWS Region: ${{ github.event.inputs.aws-region }}"
          echo "Prefect Version: ${{ github.event.inputs.prefect-version }}"
          echo "Prefect Worker: ${{ github.event.inputs.prefect-worker }}"
          echo "S3 Path: ${{ github.event.inputs.s3_path }}"

      - name: Prefect Worker
        run: |
          prefect work-pool create ${{ env.PREFECT_WORKER }} --type ecs --overwrite

      - name: Prefect Worker finished
        run: echo "Prefect Worker ${{ env.PREFECT_WORKER }} created at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

  ecr-repo:
    name: ECR Repo & Image
    needs: worker-prefect
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Generate Markdown Summary
        run: echo "AWS ECS deployment with commit hash $GITHUB_SHA" >> $GITHUB_STEP_SUMMARY
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Create new ECR repository using AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1.1.0
        with:
          name: "${{ env.PROJECT }}-ecr"
          template: infrastructure/ecr_repository.yml
          parameter-overrides: "RepositoryName=${{ env.PROJECT }}"
          no-fail-on-empty-changeset: "1"

      - name: Flow deployment finished
        run: echo "ECR repository created at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          export IMAGE="$ECR_REGISTRY/$PROJECT:$IMAGE_TAG"
          docker build -t $IMAGE .
          docker push $IMAGE
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Flow deployments finished
        run: echo "ECR image ${{ steps.build-image.outputs.image }} built at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

  prefect-agent-ecs:
    name: ECS Cluster & Prefect Agent
    runs-on: ubuntu-latest
    needs: ecr-repo
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Add Prefect Cloud Secrets to SSM Parameter Store (needed for container in ECS task)
        id: aws
        run: |
          aws ssm put-parameter --type SecureString --name PREFECT_API_URL --value ${{ secrets.PREFECT_API_URL }} --overwrite
          aws ssm put-parameter --type SecureString --name PREFECT_API_KEY --value ${{ secrets.PREFECT_API_KEY }} --overwrite
          export AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
          echo "accountid=$AWS_ACCOUNT_ID" >> $GITHUB_OUTPUT
#          echo ::set-output name=accountid::$AWS_ACCOUNT_ID

      - name: Deploy to ECS with AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1.1.0
        with:
          name: ${{ env.PROJECT }}
          template: infrastructure/ecs_cluster_prefect_agent.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: "cpu=${{ github.event.inputs.cpu }},memory=${{ github.event.inputs.memory }},project=${{ env.PROJECT }},worker=${{ env.PREFECT_WORKER }},cluster=${{ env.ECS_CLUSTER }},image=${{ needs.ecr-repo.outputs.image }},awsaccountid=${{steps.aws.outputs.accountid}},region=${{ env.AWS_REGION }}"

      - name: ECS Service Deployment finished
        run: echo "ECS Service Deployment finished at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

      - name: Generate task definition
        id: task-definition
        run: aws ecs describe-task-definition --task-definition $PROJECT --query taskDefinition > task-definition.json

      - name: Upload task definition as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ECS task definition
          path: task-definition.json

      - name: Summary
        run: echo 'AWS ECS agent successfully deployed and ready to run your flows! :rocket:' >> $GITHUB_STEP_SUMMARY
